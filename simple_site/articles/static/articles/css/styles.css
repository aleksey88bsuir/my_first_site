body, html {
      margin: 0;
      padding: 0;
      height: 100%;
    }

.container {
  position: relative; /* Относительное позиционирование */
  min-height: 100vh; /* Минимальная высота, чтобы футер всегда был виден */
}

/* Стили для футера */
.footer {
  position: absolute;
  bottom: 0;
  width: 100%;
  height: 2.5rem; /* Высота футера */
  margin-top: auto; /* Автоматическое отступ сверху, чтобы футер всегда был внизу контейнера */
  box-sizing: border-box;
  background: #3F4137;
  padding: 5px;
  text-align: center;
  color: #aaa;
  font-size: 14px;
  font-family: Verdana, Geneva, Arial, Helvetica;
  overflow: hidden;
}

.header {
	background: #3F4137;
	height: 60px;
}

ul.mainmenu {
	list-style: none;
	margin: 0;
	padding: 0;
	height: 60px;
	color: #fdc073;
	font-size: 20px;
	overflow: hidden;
}
ul.mainmenu li {
	float: left;
	margin: 18px 40px 0 30px;
}

ul.mainmenu li.logo {margin: 0;}
ul.mainmenu li.last {float: right;}

ul.mainmenu li a {
	color: #fdc073;
	text-decoration: none;
}

ul.mainmenu li a:hover {
	color: #FDA83D;
}

.logo {
	background: url('../images/logo.png') no-repeat 10px 5px;
	width: 70px;
	height: 60px;
}

.clear {clear: both;}


.content-text {
    margin: 0px 0 0 0px;
    color: #000;
    font-size: 20px;
    font-family: Yandex Sans Display Light;
    padding: 10px; /* Отступ по всему периметру равный 10 пикселям */
}

.content-text h1 {font-size: 32px;}

.search-field {
    margin: 10px 0 0 30px;
    color: #000;
    font-size: 20px;
    font-family: Yandex Sans Display Light;
}

.search-field-under {
    margin: 0px 0 10 0px;
    color: #000;
    font-size: 25px;
    font-family: Yandex Sans Display Light;
    width: 300px;
}


ul.list-articles {
	list-style: none;
	margin: 0;
	padding: 0;
}
ul.list-articles li {
	border-bottom: 1px solid #ccc;
}

div.article-panel {
    background: #eee;
    padding: 5px 10px 5px 10px;
    box-sizing: border-box;
    overflow: hidden;
    color: #555;
}
div.article-panel p.first {
    margin: 0;
    float: left;
}
div.article-panel p.last {
    margin: 0;
    float: right;
}

img {max-width: 600px; height: auto;}

img.img-article-left {
	max-width: 300px;
	height: auto;
	float: left;
	padding: 0 10px 10px 0;
}

img.img-article-left.thumb {
	max-width: 150px;
	height: auto;
}

div.article-panel p.first {
    margin: 0;
    float: left;
}

div.article-panel p.last {
    margin: 0;
    float: right;
}

p.link-read-post {
	text-align: right;
}

p.link-read-post a {
	padding: 10px;
	min-width: 100px;
	background: #333671;
	color: #fff;
	text-decoration: none;
}

/* Специальные формы */

.form-input {
    width: 300px;
    font-size: 16px;
    padding: 10px;
}

.form-label {
    display: inline-block;
    min-width: 150px;
    vertical-align: top;
    padding: 10px;
}

.form-error ul {
    list-style: none;
    padding: 0;
    color: #CC0000;
}

.form-button {
    min-width: 200px;
    font-size: 16px;
    padding: 10px;
}

.form-label,
button[type="submit"] {
    font-size: 16px; /* Измените значение на желаемый размер шрифта */
    margin: 10px;
}

/* Анимация */
.animated {
  transition-property: background-color;
  transition-duration: 3s;
  /*
  transition позволяет задать переход одновременно для нескольких свойств в последовательности: property duration timing-function delay.

  transition: font-size 3s, color 2s;

  В transition-property записывается список свойств, изменения которых необходимо анимировать, например: left , margin-left , height , color. Анимировать можно не все свойства, но многие из них. Значение свойства all означает «анимируй все свойства».

  В transition-duration можно определить, сколько времени займёт анимация. Время должно быть задано в формате времени CSS: в секундах s или миллисекундах ms.

  В transition-delay можно определить задержку перед началом анимации. Например, если transition-delay: 1s , тогда анимация начнётся через 1 секунду после изменения свойства. Отрицательные значения также допустимы. В таком случае анимация начнётся с середины. Например, если transition-duration равно 2s, а transition-delay – -1s , тогда анимация займёт одну секунду и начнётся с середины.

  transition-timing-function – временная функция перехода описывает, как процесс анимации будет распределён во времени. Будет ли она начата медленно и затем ускорится или наоборот. На первый взгляд это очень сложное свойство, но оно становится понятным, если уделить ему немного времени. Это свойство может принимать два вида значений: кривую Безье или количество шагов. Давайте начнём с кривой Безье, как с наиболее часто используемой.

  Есть несколько встроенных обозначений кривых Безье: linear, ease, ease-in, ease-out и ease-in-out. linear это короткая запись для cubic-bezier(0, 0, 1, 1) – прямой линии, которую мы видели раньше. Другие названия – это также сокращения для других cubic-bezier
  */
}
.move {
  position: relative;
  width: 350px;
  height: 100px;
  color: #000;
  left: 0;
  cursor: pointer;
  display: flex;
  padding: 10px;
  justify-content: space-between;
}
.move img {
  width: 100px;
  height: 100px;
}
.move0 {
  background-image: url(../img/1.jpg);
  transition: left 5s linear;
}
.move1 {
  background-image: url(../img/2.jpg);
  transition: left 5s ease;
}
.move2 {
  background-image: url(../img/3.jpg);
  transition: left 5s ease-in;
}
.move3 {
  background-image: url(../img/4.jpg);
  transition: left 5s ease-out;
}
.move4 {
  background-image: url(../img/5.jpg);
  transition: left 5s ease-in-out;
}
.img-animate {
  transition-property: opacity;
  transition-duration: 2s;
}
@keyframes move {
  from {
    left: 0px
  }
  to {
    left: 150px;
  }
}
.imgKeyframes {
  animation: move 3s infinite alternate;
  position: absolute;
}
